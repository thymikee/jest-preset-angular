"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["1703"],{597:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>i,default:()=>h,toc:()=>c,metadata:()=>t,assets:()=>l,contentTitle:()=>d});var t=JSON.parse('{"id":"getting-started/options","title":"Options","description":"jest-preset-angular uses ts-jest options under the hood, which are located under the transform of Jest config object","source":"@site/versioned_docs/version-14.x/getting-started/options.md","sourceDirName":"getting-started","slug":"/getting-started/options","permalink":"/jest-preset-angular/pr-preview/pr-3358/docs/14.x/getting-started/options","draft":false,"unlisted":false,"editUrl":"https://github.com/thymikee/jest-preset-angular/edit/main/website/versioned_docs/version-14.x/getting-started/options.md","tags":[],"version":"14.x","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1758525656000,"frontMatter":{"id":"options","title":"Options"},"sidebar":"docs","previous":{"title":"Presets","permalink":"/jest-preset-angular/pr-preview/pr-3358/docs/14.x/getting-started/presets"},"next":{"title":"Test environment","permalink":"/jest-preset-angular/pr-preview/pr-3358/docs/14.x/getting-started/test-environment"}}'),o=s(5893),r=s(65);let i={id:"options",title:"Options"},d=void 0,l={},c=[{value:"Processing with esbuild",id:"processing-with-esbuild",level:3},{value:"Exposed configuration",id:"exposed-configuration",level:3},{value:"Brief explanation of config",id:"brief-explanation-of-config",level:3}];function a(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"jest-preset-angular"})," uses ",(0,o.jsx)(n.code,{children:"ts-jest"})," options under the hood, which are located under the ",(0,o.jsx)(n.code,{children:"transform"})," of Jest config object\nin the ",(0,o.jsx)(n.code,{children:"package.json"})," file of your project, or through a ",(0,o.jsx)(n.code,{children:"jest.config.js"}),", or ",(0,o.jsx)(n.code,{children:"jest.config.ts"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["More information about ",(0,o.jsx)(n.code,{children:"ts-jest"})," options, see ",(0,o.jsx)(n.a,{href:"https://kulshekhar.github.io/ts-jest/docs/getting-started/options",children:"doc"})]}),"\n",(0,o.jsx)(n.admonition,{type:"important",children:(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.strong,{children:"v9.0.0"}),", ",(0,o.jsx)(n.code,{children:"jest-preset-angular"})," default Jest configuration no longer provides ",(0,o.jsx)(n.code,{children:"moduleNameMapper"}),". If you wish to reuse\nthe old ",(0,o.jsx)(n.code,{children:"moduleNameMapper"})," configuration, you can put this into your Jest config."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest';\n\nexport default {\n  //...\n  moduleNameMapper: {\n    '^src/(.*)$': '<rootDir>/src/$1',\n    '^app/(.*)$': '<rootDir>/src/app/$1',\n    '^assets/(.*)$': '<rootDir>/src/assets/$1',\n    '^environments/(.*)$': '<rootDir>/src/environments/$1',\n  },\n} satisfies Config;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"processing-with-esbuild",children:"Processing with esbuild"}),"\n",(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.strong,{children:"v11.0.0"}),", ",(0,o.jsx)(n.code,{children:"jest-preset-angular"})," introduced the usage of ",(0,o.jsx)(n.code,{children:"esbuild"})," to process files besides TypeScript API. By default, all ",(0,o.jsx)(n.code,{children:".mjs"})," files\nwill be processed by ",(0,o.jsx)(n.code,{children:"esbuild"})," in ",(0,o.jsx)(n.code,{children:"jest-preset-angular"}),". To configure extra files to process with ",(0,o.jsx)(n.code,{children:"esbuild"}),", one can do the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest';\n\nexport default {\n  //...\n  transform: {\n    '^.+\\\\.(ts|js|mjs|html|svg)$': [\n      'jest-preset-angular',\n      {\n        processWithEsbuild: [<glob_to_files>]\n      }\n    ]\n  }\n} satisfies Config;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"exposed-configuration",children:"Exposed configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { Config } from 'jest';\n\nexport default {\n  moduleFileExtensions: ['ts', 'html', 'js', 'json', 'mjs'],\n  snapshotSerializers: [\n    'jest-preset-angular/build/serializers/html-comment',\n    'jest-preset-angular/build/serializers/ng-snapshot',\n    'jest-preset-angular/build/serializers/no-ng-attributes',\n  ],\n  testEnvironment: 'jsdom',\n  transformIgnorePatterns: ['node_modules/(?!(.*\\\\.mjs$|@angular/common/locales/.*\\\\.js$))'],\n  transform: {\n    '^.+\\\\.(ts|js|mjs|html|svg)$': [\n      'jest-preset-angular',\n      {\n        tsconfig: '<rootDir>/tsconfig.spec.json',\n        stringifyContentPathRegex: '\\\\.(html|svg)$',\n      },\n    ],\n  },\n} satisfies Config;\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"important",children:(0,o.jsxs)(n.p,{children:["Jest runs with ",(0,o.jsx)(n.code,{children:"jest-preset-angular"})," neither in browser nor through dev server. It uses ",(0,o.jsx)(n.code,{children:"JSDOM"})," to abstract browser environment hence we depend on\n",(0,o.jsx)(n.code,{children:"JSDOM"})," implementation for real browser features."]})}),"\n",(0,o.jsx)(n.h3,{id:"brief-explanation-of-config",children:"Brief explanation of config"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We're using ",(0,o.jsx)(n.code,{children:'"transform"'})," to pass information about configuration to use for code compilation with ",(0,o.jsx)(n.code,{children:"ts-jest"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"moduleFileExtensions"'})," \u2013 our modules are TypeScript (",(0,o.jsx)(n.code,{children:"ts"}),"), HTML (",(0,o.jsx)(n.code,{children:"html"}),"), JavaScript (",(0,o.jsx)(n.code,{children:"js"}),"), JSON (",(0,o.jsx)(n.code,{children:"json"}),") and ESM JavaScript (",(0,o.jsx)(n.code,{children:"mjs"}),") files."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"moduleNameMapper"'})," \u2013 if you're using absolute imports here's how to tell Jest where to look for them; uses ",(0,o.jsx)(n.code,{children:"RegExp"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"snapshotSerializers"'})," - array of serializers which will be applied to snapshot the code. See more in ",(0,o.jsx)(n.a,{href:"/jest-preset-angular/pr-preview/pr-3358/docs/14.x/guides/snapshot-testing",children:"Snapshot testing"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"testEnvironment"'})," \u2013 the test environment to run on."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"transformIgnorePatterns"'}),": instruct Jest to transform any ",(0,o.jsx)(n.code,{children:".mjs"})," files which come from ",(0,o.jsx)(n.code,{children:"node_modules"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'"transform"'})," \u2013 run every ",(0,o.jsx)(n.code,{children:"TS"}),", ",(0,o.jsx)(n.code,{children:"JS"}),", ",(0,o.jsx)(n.code,{children:"MJS"}),", ",(0,o.jsx)(n.code,{children:"HTML"}),", or ",(0,o.jsx)(n.code,{children:"SVG"})," file through so called ",(0,o.jsx)(n.em,{children:"Jest transformer"}),"; this lets Jest understand non-JS syntax."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},65:function(e,n,s){s.d(n,{Z:()=>d,a:()=>i});var t=s(7294);let o={},r=t.createContext(o);function i(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);